name: Update AUR Package

on:
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to update to'
        required: true
        type: string
      sha256:
        description: 'SHA256 checksum of the .deb file'
        required: true
        type: string
      deb_filename:
        description: 'Name of the .deb file'
        required: false
        type: string
      source_url:
        description: 'Download URL for the .deb file'
        required: false
        type: string
  workflow_call:
    inputs:
      version:
        description: 'Version to update to'
        required: true
        type: string
      sha256:
        description: 'SHA256 checksum of the .deb file'
        required: true
        type: string
      deb_filename:
        description: 'Name of the .deb file'
        required: false
        type: string
      source_url:
        description: 'Download URL for the .deb file'
        required: false
        type: string

permissions:
  contents: write
  
jobs:
  update-aur:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      
      - name: Verify secret is available
        run: |
          if [ -z "${{ secrets.AUR_SSH_PRIVATE_KEY }}" ]; then
            echo "❌ ERROR: AUR_SSH_PRIVATE_KEY secret is not available!"
            exit 1
          else
            echo "✅ AUR_SSH_PRIVATE_KEY secret is available"
          fi
          
      - name: Setup SSH for AUR
        env:
          AUR_SSH_PRIVATE_KEY: ${{ secrets.AUR_SSH_PRIVATE_KEY }}
        run: |
          mkdir -p ~/.ssh
          chmod 700 ~/.ssh
          
          # Save SSH key (preserving line breaks)
          echo "$AUR_SSH_PRIVATE_KEY" > ~/.ssh/aur
          chmod 600 ~/.ssh/aur
          
          # Add known host
          ssh-keyscan -H aur.archlinux.org >> ~/.ssh/known_hosts
          chmod 644 ~/.ssh/known_hosts
          
          # Configure SSH
          cat > ~/.ssh/config <<EOF
          Host aur.archlinux.org
            IdentityFile ~/.ssh/aur
            User aur
            StrictHostKeyChecking no
          EOF
          chmod 600 ~/.ssh/config
          
          # Verify key was saved correctly
          echo "🔍 Verifying SSH configuration..."
          ls -la ~/.ssh/
          echo "🔑 First line of key:"
          head -n 1 ~/.ssh/aur
          
      - name: Configure git
        run: |
          git config --global user.name "SIGTERM"
          git config --global user.email "me@sigterm.vodka"
          
      - name: Update package files
        env:
          NEW_VERSION: ${{ inputs.version }}
          NEW_SHA256: ${{ inputs.sha256 }}
          DEB_FILENAME: ${{ inputs.deb_filename }}
          SOURCE_URL: ${{ inputs.source_url }}
        run: |
          set -e
          
          REPO_OWNER="egoist"
          REPO_NAME="chatwise-releases"
          PACKAGE_NAME="chatwise"
          AUR_REPO="ssh://aur@aur.archlinux.org/chatwise.git"
          
          # Determine the source URL to use
          if [ -n "$SOURCE_URL" ]; then
            FINAL_SOURCE_URL="$SOURCE_URL"
            echo "📝 Using detected source URL: $FINAL_SOURCE_URL"
          elif [ -n "$DEB_FILENAME" ]; then
            # Fallback: construct URL with detected filename
            FINAL_SOURCE_URL="https://gh-releases.chatwise.app/${REPO_OWNER}/${REPO_NAME}/v${NEW_VERSION}/${DEB_FILENAME}"
            echo "📝 Constructed source URL from filename: $FINAL_SOURCE_URL"
          else
            # Last resort: use old pattern (backward compatibility)
            FINAL_SOURCE_URL="https://gh-releases.chatwise.app/${REPO_OWNER}/${REPO_NAME}/v${NEW_VERSION}/ChatWise_${NEW_VERSION}_amd64.deb"
            echo "⚠️  Using fallback source URL pattern: $FINAL_SOURCE_URL"
          fi
          
          echo "📝 Updating PKGBUILD to version ${NEW_VERSION}..."
          sed -i "s/^pkgver=.*/pkgver=${NEW_VERSION}/" PKGBUILD
          sed -i "s/^pkgrel=.*/pkgrel=1/" PKGBUILD
          
          # Update source URL in PKGBUILD - handle both quoted patterns
          sed -i "s|^source=(\"https://.*\")$|source=(\"${FINAL_SOURCE_URL}\")|" PKGBUILD
          sed -i "s|^source=(\"https://.*|source=(\"${FINAL_SOURCE_URL}\")|" PKGBUILD
          
          sed -i "s/^sha256sums=.*/sha256sums=('${NEW_SHA256}')/" PKGBUILD
          
          echo "📝 Updating .SRCINFO version fields..."
          # Update pkgver
          sed -i "s/^\tpkgver = .*/\tpkgver = ${NEW_VERSION}/" .SRCINFO
          # Update pkgrel
          sed -i "s/^\tpkgrel = .*/\tpkgrel = 1/" .SRCINFO
          # Update source URL
          sed -i "s|^\tsource = .*|\tsource = ${FINAL_SOURCE_URL}|" .SRCINFO
          # Update sha256sums
          sed -i "s/^\tsha256sums = .*/\tsha256sums = ${NEW_SHA256}/" .SRCINFO
          
          echo "✅ Files updated"
          
      - name: Commit to GitHub
        run: |
          if git diff --quiet; then
              echo "✅ No changes to commit to GitHub"
          else
              git add PKGBUILD .SRCINFO
              git commit -m "Update to version ${{ inputs.version }}"
              
              # Detect current branch and push
              CURRENT_BRANCH=$(git rev-parse --abbrev-ref HEAD)
              git push origin "$CURRENT_BRANCH"
              echo "✅ Changes saved to GitHub (branch: $CURRENT_BRANCH)"
          fi
          
      - name: Push to AUR
        run: |
          set -e
          
          AUR_REPO="ssh://aur@aur.archlinux.org/chatwise.git"
          
          echo "📥 Cloning AUR repository..."
          git clone "$AUR_REPO" aur-repo
          
          cd aur-repo
          
          cp ../PKGBUILD .
          cp ../.SRCINFO .
          
          if git diff --quiet; then
              echo "✅ No changes to push to AUR"
              exit 0
          fi
          
          echo "📤 Pushing changes to AUR..."
          git add PKGBUILD .SRCINFO
          git commit -m "Update to version ${{ inputs.version }}"
          git push origin master
          
          echo "✨ Package published to AUR version ${{ inputs.version }}!"

